{"name":"Cli-intro-to-git","tagline":"Introduction to git using Bash in 60 seconds or less","body":"# Cli-Intro-to-Git\r\n==========\r\n\r\n### Introduction to git on the command line in 60 seconds or less\r\n\r\n\r\n/* \r\nType these commands directly into bash (your terminal, shell, command line interpreter, whatever you want to call it [tested in bash, sh, and zsh *ymmv])\r\n*/  \r\n```\r\npwd\r\ncd /tmp\r\npwd\r\nmkdir git\r\ncd git\r\npwd\r\ngit init\r\necho 'my test' >test1\r\nls\r\ngit status\r\ngit add test1\r\ngit status\r\ngit commit -am 'initial add of test1'\r\ngit log\r\necho 'second test' >>test1\r\ngit status\r\necho 'second test file'>test2\r\ngit status\r\ngit commit -am 'second test'\r\ngit log\r\n```\r\n/*\r\n Ok so that was git in 60 seconds.  What just went on?  Let me be abit more verbose with an intro of some very basic commands with a basic explanation after the `<--` :\r\n*/\r\n```\r\npwd      <-- Print Working Directory (the \"you are here\" of unix land)\r\nmkdir    <-- make directory/folder\r\ncd       <-- change directory (this is how you 'move' around the file system\r\nls       <-- list the current directory i.e. show me what is in the current folder\r\nman      <-- “manual” gives the manual page for any command i.e. `man ls` will give the manual page for ls\r\nman git  <-- At some point you'll feel confident enough to just pull this page up for reference, not just yet\r\n```\r\n```\r\n# This is a comment, lines that start with a hash are comments and\r\n# and are ways for me to explain what is going on for your benefit only \r\n# comments are  very important in programming languages\r\n\r\n# ok from here $ means the prompt\r\n# and you should type what directly follows that $ into your command prompt\r\n# like learning a new language it's best for you to actually speak (type) the words\r\n# and see the resulting output, it's very satisfying to see your creation take life\r\n# let's see those first commands again with some # comments to explain what's going on\r\n\r\n$ pwd\r\n# pwd should print the path to your home directory at the moment\r\n# by default this is where you usually start when opening a shell\r\n$ cd /tmp\r\n# change directory to /tmp\r\n# /tmp is a great place for temporary stuff, careful this place is erased upon reboot\r\n$ pwd\r\n# prove to me that we changed directories (i.e. it should now print /tmp)\r\n$ mkdir git\r\n# make a new directory named ‘git’\r\n$ cd git\r\n# change into the git directory\r\n$ pwd\r\n# now displays /tmp/git\r\n$ git init\r\n# initialize /tmp/git into a git repo\r\n$ echo 'my test' >test1\r\n# overwrite or make a new file called test1 and makes its contents read ‘my test’\r\n$ ls\r\n# show me this new file\r\n$ cat test1\r\n# dumps the contents of the file which should be ‘my test’\r\n$ git status\r\n# have git tell us of any changes in the current directory\r\n$ git add test1\r\n# add our new file to gits tracking system\r\n$ git status\r\n# show us that the new file has now been added\r\n$ git commit -am 'initial add of test1'\r\n# make a commit and give it a nice message explaining what is going on\r\n$ git log\r\n# show us a log of the history of this git repo\r\n$ echo 'second test' >>test1\r\n# make a second line in our first test file\r\n$ git status\r\n$ echo 'second test file'>test2\r\n# make a second test file\r\n$ git status\r\n# show us which files have changed\r\n$ git diff\r\n# show us the changes\r\n$ git commit -am 'second test'\r\n# commit those changes\r\n$ git log\r\n# show us a log of the history of this git repo\r\n```\r\n# Okay from here let’s make a git directory in our home and start cloneing repos from a git repo\r\n```\r\ncd\r\n# given no arguments cd will take you home\r\n$ pwd\r\n/home/bob\r\n```\r\n```\r\n$ mkdir git\r\n# there is no output for this command\r\n```\r\n```\r\n$ cd git\r\n# again no output on this command so long as there are no errors\r\n# but let's prove to ourselves that we changed directories with `pwd`\r\n$ pwd\r\n/home/bob/git\r\n```\r\n\r\n\r\n```\r\n# ok now let's clone that repo!\r\n$ git clone https://github.com/WebHostingCoopTeam/WebHostingCoopTeam.github.io.git\r\nCloning into 'WebHostingCoopTeam.github.io'...\r\nremote: Counting objects: 331, done.\r\nremote: Compressing objects: 100% (2/2), done.\r\nremote: Total 331 (delta 0), reused 0 (delta 0)\r\nReceiving objects: 100% (331/331), 3.65 MiB | 483.00 KiB/s, done.\r\nResolving deltas: 100% (43/43), done.\r\nChecking connectivity... done.\r\n```\r\n\r\n\r\n```\r\nAppendix A more comment styles:\r\n\r\n// some languages a double slash is the single comment\r\n\r\n/*\r\n this is how you do a multiline\r\n comment in some languages\r\n with the slash star - comments - star slash \r\n*/\r\n```\r\n","google":"UA-69335315-1","note":"Don't delete this file! It's used internally to help with page regeneration."}