{"name":"Cli-intro-to-git","tagline":"Introduction to git using Bash in 60 seconds or less","body":"Cli-Intro-to-Git\r\n==========\r\n\r\n### Introduction to git on the command line in 60 seconds or less\r\n\r\n\r\nType these commands directly into bash your terminal, shell, command line interpreter, whatever you want to call it [tested in bash, sh, and zsh ymmv]\r\n\r\n```\r\npwd\r\ncd /tmp\r\npwd\r\nmkdir git\r\ncd git\r\npwd\r\ngit init\r\necho 'my test' >test1\r\nls\r\ngit status\r\ngit add test1\r\ngit status\r\ngit commit -am 'initial add of test1'\r\ngit log\r\necho 'second test' >>test1\r\ngit status\r\necho 'second test file'>test2\r\ngit status\r\ngit commit -am 'second test'\r\ngit log\r\n```\r\n Ok so that was git in 60 seconds.  What just went on?  Let me be abit more verbose with an intro of some very basic commands with a basic explanation after:\r\n```\r\npwd\r\n```\r\n^ Print Working Directory (the \"you are here\" of unix land)\r\n```\r\nmkdir\r\n```\r\n^ make directory/folder\r\n```\r\ncd\r\n```\r\n^ change directory (this is how you 'move' around the file system\r\n```\r\nls\r\n```\r\n^ list the current directory i.e. show me what is in the current folder\r\n```\r\nman\r\n```\r\n^ “manual” gives the manual page for any command i.e. `man ls` will give the manual page for ls\r\n```\r\nman git\r\n```\r\n^ At some point you'll feel confident enough to just pull this page up for reference, not just yet\r\n\r\n\r\nyou should type all these commands into your command prompt\r\nlike learning a new language it's best for you to actually speak (type) the words\r\nand see the resulting output, it's very satisfying to see your creation take life\r\nlet's see those first commands again with some comments to explain what's going on\r\n\r\n```\r\npwd\r\n```\r\npwd should print the path to your home directory at the moment\r\nby default this is where you usually start when opening a shell\r\n```\r\ncd /tmp\r\n```\r\nchange directory to /tmp\r\n/tmp is a great place for temporary stuff, careful this place is erased upon reboot\r\n```\r\npwd\r\n```\r\nprove to me that we changed directories (i.e. it should now print /tmp)\r\n```\r\nmkdir git\r\n```\r\nmake a new directory named ‘git’\r\n```\r\ncd git\r\n```\r\nchange into the git directory\r\n```\r\npwd\r\n```\r\nnow displays /tmp/git\r\n```\r\ngit init\r\n```\r\ninitialize /tmp/git into a git repo\r\n```\r\necho 'my test' >test1\r\n```\r\noverwrite or make a new file called test1 and makes its contents read ‘my test’\r\n```\r\nls\r\n```\r\nshow me this new file\r\n```\r\ncat test1\r\n```\r\ndumps the contents of the file which should be ‘my test’\r\n```\r\ngit status\r\n```\r\nhave git tell us of any changes in the current directory\r\n```\r\ngit add test1\r\n```\r\nadd our new file to gits tracking system\r\n```\r\ngit status\r\n```\r\nshow us that the new file has now been added\r\n```\r\ngit commit -am 'initial add of test1'\r\n```\r\nmake a commit and give it a nice message explaining what is going on\r\n```\r\ngit log\r\n```\r\nshow us a log of the history of this git repo\r\n```\r\necho 'second test' >>test1\r\n```\r\nmake a second line in our first test file\r\n```\r\ngit status\r\n```\r\n```\r\necho 'second test file'>test2\r\n```\r\nmake a second test file\r\n```\r\ngit status\r\n```\r\nshow us which files have changed\r\n```\r\ngit diff\r\n```\r\nshow us the changes\r\n```\r\ngit commit -am 'second test'\r\n```\r\ncommit those changes\r\n```\r\ngit log\r\n```\r\nshow us a log of the history of this git repo\r\n\r\n\r\nOkay from here let’s make a git directory in our home and start cloneing repos from a git repo\r\n```\r\ncd\r\n```\r\ngiven no arguments cd will take you home\r\n```\r\npwd\r\n```\r\n```\r\nmkdir git\r\n```\r\nthere is no output for this command\r\n```\r\ncd git\r\n```\r\nagain no output on this command so long as there are no errors\r\nbut let's prove to ourselves that we changed directories with `pwd`\r\n```\r\npwd\r\n```\r\n\r\n# Creating your own repo \r\n\r\nLet’s get you your own repo and make a static page\r\n\r\nIf you don’t have a github account get one it’s free\r\n\r\nnow make a new repo\r\n\r\nok now let's clone that repo! There is a link in the bottom righthand corner copy it then `git clone` that link\r\n\r\nhere’s an example of what it might look like:\r\n```\r\ngit clone https://github.com/YOURGITHUBID/YOURREPO.git\r\n```\r\nthe output should look something like this:\r\n```\r\nCloning into 'YOURREPO'...\r\nremote: Counting objects: 331, done.\r\nremote: Compressing objects: 100% (2/2), done.\r\nremote: Total 331 (delta 0), reused 0 (delta 0)\r\nReceiving objects: 100% (331/331), 3.65 MiB | 483.00 KiB/s, done.\r\nResolving deltas: 100% (43/43), done.\r\nChecking connectivity... done.\r\n```\r\n\r\nnow `cd` into that repo\r\n\r\n```\r\ncd YOURREPO\r\n```\r\nmake a new readme and add it to git as a tracked file, commit, then push it back up to github\r\n```\r\necho ‘# Howdy folks!’>README.md\r\ngit add README.md\r\ngit commit -am “added new README.md”\r\ngit push origin master\r\n```\r\n\r\nnow click on the ‘settings’ page for your repo, in there is large button labeled “Launch Automatic Page Generator”, on the resulting page click “Load README.md”, then click “Continue to Layouts” in the bottom right hand corner, choose a layout and save your static site, your new site is now available at an address like this one: \r\n\r\nhttp://YOURGITHUBID.github.io/YOURREPO\r\n\r\nCongratulations you now have a static site\r\n","google":"UA-69335315-1","note":"Don't delete this file! It's used internally to help with page regeneration."}